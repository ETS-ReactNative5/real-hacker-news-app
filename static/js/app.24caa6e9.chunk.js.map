{"version":3,"sources":["app/services/hackingNewsAPI.js","app/mappers/mapTime.js","app/components/Story.js","app/containers/StoriesContainer.js","app/components/Comment.js","app/containers/CommentsContainer.js","App.js"],"names":["baseUrl","newStoriesUrl","storyUrl","getStory","storyId","a","async","axios","get","then","data","result","getStoryIds","type","newsType","mapTime","timestamp","seconds","Math","floor","Date","interval","Story","memo","props","useState","story","setStory","React","refreshing","setRefreshing","onRefresh","useCallback","url","useEffect","setInterval","clearInterval","date","time","toDateString","refreshControl","RefreshControl","header","style","flexDirection","margin","padding","backgroundColor","name","fontSize","fontWeight","title","alignItems","note","by","score","justifyContent","kids","color","length","footer","bordered","info","onPress","Linking","openURL","disabled","warning","navigation","navigate","StoriesContainer","route","storiesToShow","setStoriesToShow","storyIds","setStoryIds","params","onScroll","layoutMeasurement","contentOffset","contentSize","height","y","isCloseToBottom","nativeEvent","scrollEventThrottle","slice","map","TouchableOpacity","key","Comment","expanded","setExpanded","comment","setComment","getComment","commentId","text","Section","borderBottomColor","borderBottomWidth","Accordion","description","left","Icon","icon","Item","Platform","OS","flexWrap","source","html","contentWidth","useWindowDimensions","width","right","alignContent","titleStyle","descriptionStyle","kid","CommentsContainer","previewData","setPreviewData","commentsToShow","setCommentsToShow","comments","setComments","id","holyUrl","catch","console","log","getMeta","status","textAlign","textTransform","cardBody","image","Image","uri","flex","resizeMode","danger","pop","StoriesStack","createStackNavigator","Tab","createMaterialTopTabNavigator","StoriesStackScreen","Navigator","Screen","options","component","initialParams","App","useFonts","Helvetica","require","Roboto","Roboto_medium","NavigationContainer","alignSelf","testProps"],"mappings":"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","file":"static/js/app.24caa6e9.chunk.js","sourcesContent":["/* eslint-disable indent */\r\nimport axios from \"axios\";\r\n\r\nexport const baseUrl = \"https://hacker-news.firebaseio.com/v0\";\r\n\r\nexport const newStoriesUrl = `${baseUrl}/newstories.json`;\r\nexport const bestStoriesUrl = `${baseUrl}/beststories.json`;\r\nexport const topStoriesUrl = `${baseUrl}/topstories.json`;\r\n\r\nexport const storyUrl = `${baseUrl}/item/`;\r\n\r\nexport const commentUrl = `${baseUrl}/item/2921983.json?print=pretty`;\r\n\r\nexport const getComment = async (storyId) => {\r\n  const result = await axios\r\n    .get(`${storyUrl}${storyId}.json`)\r\n    .then(({ data }) => data);\r\n  return result;\r\n};\r\n\r\nexport const getStory = async (storyId) => {\r\n  const result = await axios\r\n    .get(`${storyUrl}${storyId}.json`)\r\n    .then(({ data }) => data);\r\n  return result;\r\n};\r\n\r\nexport const getStoryIds = async (type) => {\r\n  // console.log(type);\r\n  let newsType =\r\n    type === \"n\"\r\n      ? newStoriesUrl\r\n      : type === \"b\"\r\n      ? bestStoriesUrl\r\n      : type === \"t\"\r\n      ? topStoriesUrl\r\n      : newStoriesUrl;\r\n  const result = await axios.get(newsType).then(({ data }) => data);\r\n  return result;\r\n};\r\n\r\nexport const getMeta = async (holyUrl) => {\r\n  // console.log(\"holyUrl\", holyUrl);\r\n  const result = await axios\r\n    .get(\r\n      `https://api.microlink.io/?url=${holyUrl}&audio=false&iframe=false&palette=false&screenshot=false&video=falses`\r\n    )\r\n    .catch((data) => console.log(data))\r\n    .then(({ data }) => data);\r\n  // .then((data) => console.log(data));\r\n  return result;\r\n};\r\n","export const mapTime = (timestamp) => {\r\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\r\n\r\n  let interval = Math.floor(seconds / 31536000);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} years`;\r\n  }\r\n\r\n  interval = Math.floor(seconds / 2592000);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} months`;\r\n  }\r\n\r\n  interval = Math.floor(seconds / 86400);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} days`;\r\n  }\r\n\r\n  interval = Math.floor(seconds / 3600);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} hours`;\r\n  }\r\n\r\n  interval = Math.floor(seconds / 60);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} minutes`;\r\n  }\r\n\r\n  // return `${Math.floor(seconds)} seconds`;\r\n  return \"About minute\";\r\n};\r\n","import React, { useEffect, useState, memo } from \"react\";\r\nimport {\r\n  getStory,\r\n  // getMeta\r\n} from \"../services/hackingNewsAPI\";\r\nimport { mapTime } from \"../mappers/mapTime\";\r\nimport {\r\n  Card,\r\n  CardItem,\r\n  Body,\r\n  Text,\r\n  Left,\r\n  Icon,\r\n  Button,\r\n  Right,\r\n} from \"native-base\"; // Right,\r\n\r\nimport { Linking, RefreshControl } from \"react-native\";\r\n\r\nexport const Story = memo(function Story(props) {\r\n  //set story\r\n  const [story, setStory] = useState({});\r\n\r\n  //refreshing\r\n  const [refreshing, setRefreshing] = React.useState(false);\r\n\r\n  const onRefresh = React.useCallback(() => {\r\n    setRefreshing(true);\r\n    // console.log(\"story refresh\");\r\n\r\n    getStory(props.storyId)\r\n      .then((data) => data && data.url && setStory(data))\r\n      .then(() => setRefreshing(false));\r\n  }, []);\r\n\r\n  //useEffect for initialize and interval refreshing\r\n  useEffect(() => {\r\n    setRefreshing(true);\r\n\r\n    getStory(props.storyId)\r\n      .then((data) => data && data.url && setStory(data))\r\n      .then(() => setRefreshing(false));\r\n    // .then(()=>{console.log(\"story useEffect refresh\");});\r\n\r\n    //set interval for repeating refresh\r\n    const interval = setInterval(() => {\r\n      setRefreshing(true);\r\n\r\n      getStory(props.storyId)\r\n        .then((data) => data && data.url && setStory(data))\r\n        .then(() => setRefreshing(false));\r\n      // .then(()=>{console.log(\"story auto refresh\");});\r\n    }, 45000);\r\n\r\n    //and clear it :)\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  //date converting\r\n  let date = new Date(story.time * 1000).toDateString();\r\n\r\n  return story && story.url ? (\r\n    <Card\r\n      refreshControl={\r\n        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n      }\r\n    >\r\n      {/* HEADER OF A STORY */}\r\n      <CardItem\r\n        header\r\n        style={{\r\n          flexDirection: \"row\",\r\n          margin: 0,\r\n          padding: 0,\r\n          backgroundColor: \"#ecf0f1\",\r\n        }}\r\n      >\r\n        <Left\r\n          style={{\r\n            margin: -10,\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <Icon name=\"newspaper-outline\" style={{ fontSize: 48 }} />\r\n          <Body>\r\n            <Text style={{ fontWeight: \"bold\" }}>{story.title}</Text>\r\n          </Body>\r\n        </Left>\r\n      </CardItem>\r\n      <CardItem header>\r\n        <Right style={{ alignItems: \"flex-start\", margin: -10, padding: 0 }}>\r\n          <Text note>By: {story.by}</Text>\r\n          <Text note>Rating: {story.score}</Text>\r\n          <Text note>{date}</Text>\r\n        </Right>\r\n        <Right\r\n          style={{\r\n            justifyContent: \"flex-start\",\r\n            margin: -10,\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <Text note>Type: {story.type}</Text>\r\n          <Text note>{mapTime(story.time)} ago</Text>\r\n          {story.kids ? (\r\n            <Text note style={{ color: \"grey\" }}>\r\n              Total comments: {story.kids.length}\r\n            </Text>\r\n          ) : (\r\n            <Text note>No comments yet</Text>\r\n          )}\r\n        </Right>\r\n      </CardItem>\r\n      {/* END HEADER OF A STORY */}\r\n\r\n      {/* FOOTER OF A STORY */}\r\n      <CardItem footer bordered>\r\n        <Body\r\n          style={{\r\n            flexDirection: \"row\",\r\n            justifyContent: \"space-between\",\r\n            margin: -10,\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <Button\r\n            style={{ margin: 0, padding: 0 }}\r\n            info\r\n            onPress={() => Linking.openURL(story.url)}\r\n          >\r\n            <Text>Open link</Text>\r\n          </Button>\r\n          <Button\r\n            disabled={false}\r\n            style={{ margin: 0, padding: 0 }}\r\n            warning\r\n            onPress={() => {\r\n              props.navigation.navigate(\"Comments\", {\r\n                story,\r\n              });\r\n            }}\r\n          >\r\n            <Text>Show more</Text>\r\n          </Button>\r\n        </Body>\r\n      </CardItem>\r\n      {/* FOOTER OF A STORY */}\r\n    </Card>\r\n  ) : null;\r\n});\r\n","import { TouchableOpacity, RefreshControl } from \"react-native\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Story } from \"../components/Story\";\r\n\r\nimport { Content } from \"native-base\";\r\n\r\nimport { getStoryIds } from \"../services/hackingNewsAPI\";\r\n\r\n//SCROLLVIEW INFINITE SCROLL (+100 causes earlier scroll update)\r\nconst isCloseToBottom = ({ layoutMeasurement, contentOffset, contentSize }) => {\r\n  const paddingToBottom = 20;\r\n  return (\r\n    layoutMeasurement.height + contentOffset.y + 100 >=\r\n    contentSize.height - paddingToBottom\r\n  );\r\n};\r\n// END SCROLLVIEW INFINITE SCROLL\r\n\r\nexport default function StoriesContainer({ navigation, route }) {\r\n  //set number stories to show\r\n  const [storiesToShow, setStoriesToShow] = useState(20);\r\n\r\n  const handleSetStoriesToShow = () => {\r\n    if (storiesToShow < 500) {\r\n      setRefreshing(true);\r\n      setStoriesToShow(storiesToShow + 20);\r\n      setInterval(() => {\r\n        setRefreshing(false);\r\n      }, 1500);\r\n      // setRefreshing(false);\r\n    } else {\r\n      setStoriesToShow(500);\r\n    }\r\n  };\r\n\r\n  //set stories from API call\r\n  const [storyIds, setStoryIds] = useState([]);\r\n\r\n  //refreshing\r\n  const [refreshing, setRefreshing] = React.useState(false);\r\n\r\n  const onRefresh = React.useCallback(() => {\r\n    setRefreshing(true);\r\n    // console.log(\"swipe refresh\");\r\n\r\n    getStoryIds(route.params.type)\r\n      .then((data) => {\r\n        setStoryIds(data);\r\n      })\r\n      .then(() => setRefreshing(false));\r\n  }, []);\r\n\r\n  //useEffect for initialize and interval refreshing\r\n  useEffect(() => {\r\n    setRefreshing(true);\r\n\r\n    getStoryIds(route.params.type)\r\n      .then((data) => {\r\n        setStoryIds(data);\r\n      })\r\n      .then(() => setRefreshing(false));\r\n    // .then(()=>{console.log(\"the first refresh\");});\r\n\r\n    //set interval for repeating refresh\r\n    const interval = setInterval(() => {\r\n      setRefreshing(true);\r\n      getStoryIds(route.params.type)\r\n        .then((data) => {\r\n          setStoryIds(data);\r\n        })\r\n        .then(() => setRefreshing(false));\r\n      // .then(()=>{ console.log(\"another successful auto refresh\"); });\r\n    }, 60000);\r\n\r\n    //and clear it :)\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // for manual refresh BUTTON\r\n  // const  handleRefresh = () => {\r\n  //   getStoryIds().then(data => {\r\n  //     setStoryIds(data);\r\n  //     console.log(\"manual refresh\");\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <Content\r\n      onScroll={({ nativeEvent }) => {\r\n        if (isCloseToBottom(nativeEvent)) {\r\n          // console.log(storiesToShow);\r\n          // console.log(\"bikini bottom\");\r\n          handleSetStoriesToShow();\r\n        }\r\n      }}\r\n      scrollEventThrottle={400}\r\n      refreshControl={\r\n        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n      }\r\n    >\r\n      {/* MAP API CALL RESULT */}\r\n      {storyIds.slice(0, storiesToShow).map((storyId) => (\r\n        <TouchableOpacity\r\n          key={storyId}\r\n          onPress={() => {\r\n            // navigation.navigate(\"Comments\", {\r\n            //   storyId: storyId,\r\n            // });\r\n          }}\r\n          // onPress= {() => {Actions.pageTwo({storyId: storyId}); }}\r\n        >\r\n          <Story key={storyId} storyId={storyId} navigation={navigation} />\r\n        </TouchableOpacity>\r\n      ))}\r\n      {/* END MAP API CALL RESULT */}\r\n    </Content>\r\n  );\r\n}\r\n","import React, { useEffect, useState, memo } from \"react\";\r\nimport { getStory as getComment } from \"../services/hackingNewsAPI\";\r\nimport { mapTime } from \"../mappers/mapTime\";\r\nimport { Text } from \"native-base\";\r\n\r\nimport { List } from \"react-native-paper\";\r\n\r\nimport HTML from \"react-native-render-html\";\r\nimport { useWindowDimensions, Platform } from \"react-native\";\r\n// import { WebView } from \"react-native-webview\";\r\n\r\nexport const Comment = memo(function Comment(props) {\r\n  //toggle head comment(s) expanding\r\n  const [expanded, setExpanded] = React.useState(true);\r\n  const handlePress = () => setExpanded(!expanded);\r\n\r\n  //set comment\r\n  const [comment, setComment] = useState({});\r\n\r\n  //refreshing\r\n  const [refreshing, setRefreshing] = React.useState(false);\r\n\r\n  //useEffect for initialize and interval refreshing\r\n  useEffect(() => {\r\n    setRefreshing(true);\r\n\r\n    getComment(props.commentId)\r\n      .then((data) => setComment(data))\r\n      .then(() => setRefreshing(false));\r\n    // .then(()=>{console.log(\"comment auto refresh\");});\r\n\r\n    //set interval for repeating refresh\r\n    const interval = setInterval(() => {\r\n      setRefreshing(true);\r\n\r\n      getComment(props.commentId)\r\n        .then((data) => setComment(data))\r\n        .then(() => setRefreshing(false));\r\n      // .then(()=>{console.log(\"comment auto refresh\");});\r\n    }, 30000);\r\n\r\n    //and clear it :)\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  //date converting\r\n  let date = new Date(comment.time * 1000).toDateString();\r\n\r\n  return comment && comment.text ? (\r\n    <List.Section\r\n      style={{\r\n        borderBottomColor: \"#E8E8E8\",\r\n        borderBottomWidth: 2,\r\n        // borderWidth: 1,\r\n        // borderColor: \"#20232a\",\r\n        // borderRadius: 6,\r\n        backgroundColor: \"#F5F5F5\",\r\n      }}\r\n    >\r\n      <List.Accordion\r\n        expanded={expanded}\r\n        onPress={handlePress}\r\n        style={{\r\n          backgroundColor: \"#E8E8E8\",\r\n        }}\r\n        title={<Text>Comment by: {comment.by}</Text>}\r\n        description={`${date}${refreshing ? \" refreshing...\" : \"\"}`}\r\n        left={(props) => (\r\n          <List.Icon {...props} icon=\"chat-processing-outline\" />\r\n        )}\r\n      >\r\n        <List.Item\r\n          left={\r\n            Platform.OS !== \"android\" ? (\r\n              () => (\r\n                <Text style={{ flexWrap: \"wrap\" }}>\r\n                  <HTML\r\n                    source={{ html: comment.text }}\r\n                    contentWidth={useWindowDimensions().width}\r\n                    style={{ flexWrap: \"wrap\" }}\r\n                  />{\" \"}\r\n                </Text>\r\n              )\r\n            ) : ( () => (\r\n              <HTML\r\n                source={{ html: comment.text }}\r\n                // contentWidth={useWindowDimensions().width}\r\n                style={{ flexWrap: \"wrap\" }}\r\n              />)\r\n            )\r\n          }\r\n        />\r\n        <List.Item\r\n          left={() => (\r\n            <Text>\r\n              {\" \"}\r\n              {comment.kids ? (\r\n                <Text\r\n                  style={{ color: \"blue\" }}\r\n                  // onPress={  () => {Actions.pageTwo({comment}); }   }\r\n                >\r\n                  Replies({comment.kids.length})\r\n                </Text>\r\n              ) : (\r\n                <Text style={{ color: \"grey\" }}>No replies yet</Text>\r\n              )}\r\n            </Text>\r\n          )}\r\n          right={() => <Text>{mapTime(comment.time)} ago</Text>}\r\n        />\r\n        {/* REPLIES */}\r\n        {comment.kids && (\r\n          <List.Item\r\n            left={(props) => (\r\n              <List.Icon\r\n                {...props}\r\n                style={{ margin: 0, padding: 0 }}\r\n                icon=\"share-all-outline\"\r\n              />\r\n            )}\r\n            style={{\r\n              margin: 0,\r\n              padding: 0,\r\n              justifyContent: \"center\",\r\n              alignContent: \"center\",\r\n            }}\r\n            titleStyle={{ margin: 0, padding: 0, height: 0 }}\r\n            description={() => (\r\n              <List.Accordion\r\n                style={{ margin: -6, padding: 0 }}\r\n                title=\"toggle replies\"\r\n                titleStyle={{ margin: 0, padding: 0 }}\r\n                descriptionStyle={{\r\n                  margin: 0,\r\n                  padding: 0,\r\n                  backgroundColor: \"purple\",\r\n                }}\r\n              >\r\n                {/* HERE COMES THE RECURSION */}\r\n                {comment.kids &&\r\n                  comment.kids.map((kid) => (\r\n                    <Comment key={kid} commentId={kid} />\r\n                  ))}\r\n                {/* HERE COMES THE RECURSION */}\r\n              </List.Accordion>\r\n            )}\r\n          />\r\n        )}\r\n      </List.Accordion>\r\n    </List.Section>\r\n  ) : null;\r\n});\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  Container,\r\n  Content,\r\n  Card,\r\n  CardItem,\r\n  Text,\r\n  Button,\r\n  Icon,\r\n  Left,\r\n  Body,\r\n  // Right,\r\n  // Thumbnail,\r\n  Spinner,\r\n} from \"native-base\";\r\n\r\n// import { WebView } from \"react-native-webview\";\r\n\r\n// import Microlink from \"@microlink/react\"; // might work someday\r\n\r\nimport { Comment } from \"../components/Comment\";\r\nimport { getStory, getMeta } from \"../services/hackingNewsAPI\";\r\nimport { RefreshControl, Image, Linking } from \"react-native\";\r\n// import axios from \"axios\";\r\n\r\n// import HTML from \"react-native-render-html\";\r\n\r\n//SCROLLVIEW INFINITE SCROLL (+100 causes earlier scroll update)\r\nconst isCloseToBottom = ({ layoutMeasurement, contentOffset, contentSize }) => {\r\n  // console.log({ layoutMeasurement, contentOffset, contentSize });\r\n  const paddingToBottom = 20;\r\n  return (\r\n    layoutMeasurement.height + contentOffset.y + 100 >=\r\n    contentSize.height - paddingToBottom\r\n  );\r\n};\r\n//SCROLLVIEW INFINITE SCROLL\r\n\r\n// export const getMeta = async (holyUrl) => {\r\n//   console.log(\"holyUrl\", holyUrl);\r\n//   const result = await axios\r\n//     .get(\r\n//       `https://api.microlink.io/?url=${holyUrl}&audio=false&iframe=false&palette=false&screenshot=false&video=falses`\r\n//     )\r\n//     .catch((data) => console.log(data))\r\n//     .then(({ data }) => data);\r\n//   // .then((data) => console.log(data));\r\n//   return result;\r\n// };\r\n\r\nexport default function CommentsContainer({ route, navigation }) {\r\n  let props = route.params;\r\n\r\n  //set preview\r\n  const [previewData, setPreviewData] = useState({});\r\n\r\n  //set number comments to show\r\n  const [commentsToShow, setCommentsToShow] = useState(5);\r\n\r\n  const handleSetCommentsToShow = () => {\r\n    if (props.story.kids) {\r\n      if (commentsToShow < props.story.kids.length) {\r\n        setCommentsToShow(commentsToShow + 5);\r\n      } else {\r\n        setCommentsToShow(props.story.kids.length);\r\n      }\r\n    }\r\n  };\r\n\r\n  //get id array from props and set\r\n  const [comments, setComments] = useState({});\r\n\r\n  // refreshing\r\n  const [refreshing, setRefreshing] = React.useState(false);\r\n\r\n  const onRefresh = React.useCallback(() => {\r\n    setRefreshing(true);\r\n    // console.log(\"story refresh\");\r\n\r\n    getStory(props.story.id)\r\n      .then((data) => data.kids && setComments(data.kids))\r\n      // .then((data) => console.log(data))\r\n      .then(() => setRefreshing(false));\r\n  }, []);\r\n\r\n  //get meta once\r\n  useEffect(() => {\r\n    setRefreshing(true);\r\n\r\n    getMeta(props.story.url)\r\n      .catch((data) => {\r\n        console.log(\"datacatch\", data);\r\n        setPreviewData({\r\n          status:\r\n            \"The description is unavailable because the limit of requests is exceeded :(\",\r\n        });\r\n        return {\r\n          status:\r\n            \"The description is unavailable because the limit of requests is exceeded :(\",\r\n        };\r\n      })\r\n      .then((data) => {\r\n        // console.log(\"not parsed\", data);\r\n        setPreviewData(data);\r\n      })\r\n      .then(() => setRefreshing(false));\r\n    return () => {\r\n      // console.log(\"oops i did it again\");\r\n      setPreviewData({});\r\n    };\r\n  }, []);\r\n\r\n  //useEffect for initialize and interval refreshing\r\n  useEffect(() => {\r\n    //extrastep for exclude error of empty array of comments\r\n    setComments(props.story.kids);\r\n\r\n    setRefreshing(true);\r\n\r\n    getStory(props.story.id)\r\n      .then((data) => data.kids && setComments(data.kids))\r\n      .then(() => setRefreshing(false));\r\n\r\n    //set interval for repeating refresh\r\n    const interval = setInterval(() => {\r\n      setRefreshing(true);\r\n\r\n      getStory(props.story.id)\r\n        .then((data) => data.kids && setComments(data.kids))\r\n        .then(() => setRefreshing(false));\r\n      // .then(()=>{console.log(\"story auto refresh\");});\r\n      // console.log(previewData);\r\n    }, 15000);\r\n\r\n    //and clear it :)\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  //alternate useEffect\r\n  // useEffect(() => {\r\n  //   setComments(props.story.kids);\r\n  // }, []);\r\n\r\n  //date converting\r\n  let date = new Date(props.story.time * 1000).toDateString();\r\n\r\n  return (\r\n    <Container>\r\n      <Content\r\n        onScroll={({ nativeEvent }) => {\r\n          if (isCloseToBottom(nativeEvent)) {\r\n            handleSetCommentsToShow();\r\n          }\r\n        }}\r\n        scrollEventThrottle={400}\r\n        refreshControl={\r\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n        }\r\n      >\r\n        <Card>\r\n          <CardItem>\r\n            <Left>\r\n              <Icon name=\"newspaper-outline\" />\r\n              <Body>\r\n                <Text style={{ fontWeight: \"bold\" }}>{props.story.title}</Text>\r\n                <Text note>{date}</Text>\r\n              </Body>\r\n            </Left>\r\n            {/* {previewData.status !==\r\n              \"The description is unavailable because the limit of requests is exceeded :(\" &&\r\n              previewData.data && (\r\n                <Right>\r\n                  <Thumbnail square small source={previewData.data.logo.url} />\r\n                </Right>\r\n              )} */}\r\n          </CardItem>\r\n          {previewData.status !==\r\n            \"The description is unavailable because the limit of requests is exceeded :(\" &&\r\n            previewData.data && (\r\n              <CardItem>\r\n                <Text\r\n                  style={{\r\n                    textAlign: \"center\",\r\n                    fontWeight: \"bold\",\r\n                    textTransform: \"uppercase\",\r\n                  }}\r\n                >\r\n                  {previewData.data.title}\r\n                </Text>\r\n              </CardItem>\r\n            )}\r\n          <CardItem cardBody>\r\n            {previewData.status !==\r\n              \"The description is unavailable because the limit of requests is exceeded :(\" &&\r\n              previewData.data &&\r\n              previewData.data.image && (\r\n                <Image\r\n                  source={{ uri: previewData.data.image.url }}\r\n                  style={{\r\n                    height: 200,\r\n                    width: 200,\r\n                    flex: 1,\r\n                    resizeMode: \"cover\",\r\n                  }}\r\n                />\r\n              )}\r\n            {!previewData.data &&\r\n              previewData.status !==\r\n                \"The description is unavailable because the limit of requests is exceeded :(\" && (\r\n                <Body\r\n                  style={{\r\n                    justifyContent: \"center\",\r\n                    textAlign: \"center\",\r\n                    alignItems: \"center\",\r\n                    alignContent: \"center\",\r\n                  }}\r\n                >\r\n                  <Spinner color=\"blue\" />\r\n                </Body>\r\n              )}\r\n          </CardItem>\r\n          <CardItem\r\n            bordered\r\n            style={{ justifyContent: \"center\", alignItems: \"center\" }}\r\n          >\r\n            <Body>\r\n              {previewData.data && (\r\n                <Text>{previewData.data.description} </Text>\r\n                // <HTML source={{ html: previewData.data.description }} />\r\n              )}\r\n              {previewData.status ===\r\n                \"The description is unavailable because the limit of requests is exceeded :(\" && (\r\n                <Text>{previewData.status}</Text>\r\n              )}\r\n              {props.story.kids ? (\r\n                <Text style={{ color: \"grey\" }}>\r\n                  Total comments: {props.story.kids.length}\r\n                </Text>\r\n              ) : (\r\n                <Text style={{ color: \"grey\" }}>No comments yet</Text>\r\n              )}\r\n            </Body>\r\n          </CardItem>\r\n          <CardItem footer bordered style={{ justifyContent: \"space-between\" }}>\r\n            <Body\r\n              style={{\r\n                flexDirection: \"row\",\r\n                justifyContent: \"space-between\",\r\n                margin: -10,\r\n                padding: 0,\r\n              }}\r\n            >\r\n              <Button\r\n                style={{ margin: 0, padding: 0 }}\r\n                onPress={() => Linking.openURL(props.story.url)}\r\n              >\r\n                <Text>Open link</Text>\r\n              </Button>\r\n              <Button\r\n                style={{ margin: 0, padding: 0 }}\r\n                danger\r\n                onPress={() => {\r\n                  navigation.pop();\r\n                }}\r\n              >\r\n                <Text>Back to news page</Text>\r\n              </Button>\r\n            </Body>\r\n          </CardItem>\r\n        </Card>\r\n        {comments &&\r\n          comments.length > 0 &&\r\n          comments\r\n            .slice(0, commentsToShow)\r\n            .map((commentId) => (\r\n              <Comment key={commentId} commentId={commentId} />\r\n            ))}\r\n      </Content>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Container, Header, Title, Body } from \"native-base\";\r\n\r\nimport { useFonts } from \"expo-font\";\r\nimport StoriesContainer from \"./app/containers/StoriesContainer\";\r\nimport CommentsContainer from \"./app/containers/CommentsContainer\";\r\n\r\n// NAV\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\r\n// NAV\r\n\r\n// NAV\r\n// const Stack = createStackNavigator();\r\nconst StoriesStack = createStackNavigator();\r\nconst Tab = createMaterialTopTabNavigator();\r\n// NAV\r\n\r\nfunction StoriesStackScreen(props) {\r\n  return (\r\n    <StoriesStack.Navigator>\r\n      <StoriesStack.Screen\r\n        options={{ header: () => null }} //hides the title\r\n        name=\"Stories\"\r\n        component={StoriesContainer}\r\n        initialParams={{ type: props.route.params.type }}\r\n      />\r\n      <StoriesStack.Screen\r\n        name=\"Comments\"\r\n        component={CommentsContainer}\r\n        options={{ header: () => null }}\r\n      />\r\n    </StoriesStack.Navigator>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  //for fonts\r\n  const [loaded] = useFonts({\r\n    Helvetica: require(\"native-base/Fonts/Roboto.ttf\"),\r\n    Roboto: require(\"native-base/Fonts/Roboto.ttf\"),\r\n    Roboto_medium: require(\"native-base/Fonts/Roboto_medium.ttf\"),\r\n  });\r\n\r\n  if (!loaded) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      <Container>\r\n        <Header style={{ backgroundColor: \"#003133\" }}>\r\n          <Body>\r\n            <Title style={{ alignSelf: \"center\", margin: 10, color: \"white\" }}>\r\n              Real hacker news\r\n            </Title>\r\n          </Body>\r\n        </Header>\r\n        <Tab.Navigator>\r\n          <Tab.Screen\r\n            testProps={\"123\"}\r\n            initialParams={{ type: \"n\" }}\r\n            name=\"New\"\r\n            component={StoriesStackScreen}\r\n          />\r\n          <Tab.Screen\r\n            testProps={\"456\"}\r\n            initialParams={{ type: \"t\" }}\r\n            name=\"Top\"\r\n            component={StoriesStackScreen}\r\n          />\r\n          <Tab.Screen\r\n            testProps={\"789\"}\r\n            initialParams={{ type: \"b\" }}\r\n            name=\"Best\"\r\n            component={StoriesStackScreen}\r\n          />\r\n        </Tab.Navigator>\r\n      </Container>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n"],"sourceRoot":""}