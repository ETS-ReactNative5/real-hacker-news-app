{"version":3,"sources":["app/services/hackingNewsAPI.js","app/mappers/mapTime.js","app/components/Story.js","app/containers/StoriesContainer.js","app/components/Comment.js","app/containers/CommentsContainer.js","App.js"],"names":["baseUrl","newStoriesUrl","storyUrl","getStory","storyId","a","async","axios","get","then","data","result","getStoryIds","type","console","log","newsType","mapTime","timestamp","seconds","Math","floor","Date","interval","Story","memo","props","useState","story","setStory","React","refreshing","setRefreshing","onRefresh","useCallback","url","useEffect","setInterval","clearInterval","date","time","toDateString","refreshControl","RefreshControl","header","name","style","fontWeight","title","note","by","score","justifyContent","alignSelf","info","onPress","Linking","openURL","footer","bordered","kids","color","navigation","navigate","length","StoriesContainer","route","storiesToShow","setStoriesToShow","storyIds","setStoryIds","params","onScroll","layoutMeasurement","contentOffset","contentSize","height","y","isCloseToBottom","nativeEvent","scrollEventThrottle","slice","map","TouchableOpacity","key","Comment","expanded","setExpanded","comment","setComment","getComment","commentId","text","Section","borderBottomColor","borderBottomWidth","backgroundColor","Accordion","description","left","Icon","icon","Item","source","html","right","margin","padding","alignContent","titleStyle","descriptionStyle","kid","CommentsContainer","previewData","setPreviewData","commentsToShow","setCommentsToShow","comments","setComments","id","holyUrl","getMeta","res","logo","alignItems","undefined","image","width","flex","resizeMode","danger","pop","StoriesStack","createStackNavigator","Tab","createMaterialTopTabNavigator","StoriesStackScreen","Navigator","Screen","options","component","initialParams","App","useFonts","Helvetica","require","Roboto","Roboto_medium","NavigationContainer","testProps"],"mappings":"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","file":"static/js/app.da4234e7.chunk.js","sourcesContent":["/* eslint-disable indent */\r\nimport axios from \"axios\";\r\n\r\nexport const baseUrl = \"https://hacker-news.firebaseio.com/v0\";\r\n\r\nexport const newStoriesUrl = `${baseUrl}/newstories.json`;\r\nexport const bestStoriesUrl = `${baseUrl}/beststories.json`;\r\nexport const topStoriesUrl = `${baseUrl}/topstories.json`;\r\n\r\nexport const storyUrl = `${baseUrl}/item/`;\r\n\r\nexport const commentUrl = `${baseUrl}/item/2921983.json?print=pretty`;\r\n\r\nexport const getComment = async (storyId) => {\r\n  const result = await axios\r\n    .get(`${storyUrl}${storyId}.json`)\r\n    .then(({ data }) => data);\r\n  return result;\r\n};\r\n\r\nexport const getStory = async (storyId) => {\r\n  const result = await axios\r\n    .get(`${storyUrl}${storyId}.json`)\r\n    .then(({ data }) => data);\r\n  return result;\r\n};\r\n\r\nexport const getStoryIds = async (type) => {\r\n  console.log(type);\r\n  let newsType =\r\n    type === \"n\"\r\n      ? newStoriesUrl\r\n      : type === \"b\"\r\n      ? bestStoriesUrl\r\n      : type === \"t\"\r\n      ? topStoriesUrl\r\n      : newStoriesUrl;\r\n  const result = await axios.get(newsType).then(({ data }) => data);\r\n  return result;\r\n};\r\n\r\nexport const getMeta = async (holyUrl) => {\r\n  console.log(\"holyUrl\", holyUrl);\r\n  const result = await axios\r\n    .get(\r\n      `https://api.microlink.io/?url=${holyUrl}&audio=false&iframe=false&palette=false&screenshot=false&video=falses`\r\n    )\r\n    .then((data) => data.data.data);\r\n  // .then((data) => console.log(data));\r\n  return result;\r\n};\r\n","export const mapTime = timestamp => {\r\n\r\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\r\n\r\n  let interval = Math.floor(seconds/ 31536000);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} years`;\r\n  }\r\n\r\n  interval = Math.floor(seconds/ 2592000);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} months`;\r\n  }\r\n\r\n  interval = Math.floor(seconds/ 86400);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} days`;\r\n  }\r\n\r\n  interval = Math.floor(seconds/ 3600);\r\n\r\n\r\n  if (interval > 1) {\r\n    return `${interval} hours`;\r\n  }\r\n\r\n  interval = Math.floor(seconds/ 60);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} minutes`;\r\n  }\r\n\r\n  // return `${Math.floor(seconds)} seconds`;\r\n  return \"about minute\";\r\n\r\n};","import React, { useEffect, useState, memo } from \"react\";\r\nimport {\r\n  getStory,\r\n  // getMeta\r\n} from \"../services/hackingNewsAPI\";\r\nimport { mapTime } from \"../mappers/mapTime\";\r\nimport {\r\n  Card,\r\n  CardItem,\r\n  Body,\r\n  Text,\r\n  Left,\r\n  Icon,\r\n  Button,\r\n  // Right,\r\n  // Thumbnail,\r\n  // Spinner,\r\n} from \"native-base\"; // Right,\r\n\r\nimport { Linking, RefreshControl } from \"react-native\";\r\n\r\n// import { Actions } from \"react-native-router-flux\"; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1\r\n// import RNUrlPreview from \"react-native-url-preview\"; //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\nexport const Story = memo(function Story(props) {\r\n  //setPreview\r\n  // const [previewData, setPreviewData] = useState({});\r\n\r\n  //set story\r\n  const [story, setStory] = useState({});\r\n\r\n  //refreshing\r\n  const [refreshing, setRefreshing] = React.useState(false);\r\n\r\n  const onRefresh = React.useCallback(() => {\r\n    setRefreshing(true);\r\n    // console.log(\"story refresh\");\r\n\r\n    // getMeta(story.url).then((res) => setPreviewData(res));\r\n\r\n    getStory(props.storyId)\r\n      .then((data) => data && data.url && setStory(data))\r\n      .then(() => setRefreshing(false));\r\n  }, []);\r\n\r\n  //useEffect for initialize and interval refreshing\r\n  useEffect(() => {\r\n    setRefreshing(true);\r\n\r\n    // getMeta(story.url).then((res) => setPreviewData(res));\r\n\r\n    // getStory(props.storyId)\r\n    //   .then(function (data) {\r\n    //     data && data.url && setStory(data);\r\n    //     return data;\r\n    //   })\r\n    //   .then((data) => {\r\n    //     data &&\r\n    //       data.url &&\r\n    //       getMeta(data.url).then((res) => setPreviewData(res));\r\n    //   })\r\n\r\n    //   .then(() => setRefreshing(false));\r\n\r\n    getStory(props.storyId)\r\n      .then((data) => data && data.url && setStory(data))\r\n      .then(() => setRefreshing(false));\r\n    // .then(()=>{console.log(\"story useEffect refresh\");});\r\n\r\n    //set interval for repeating refresh\r\n    const interval = setInterval(() => {\r\n      setRefreshing(true);\r\n\r\n      // getMeta(story.url).then((res) => setPreviewData(res));\r\n\r\n      getStory(props.storyId)\r\n        .then((data) => data && data.url && setStory(data))\r\n        .then(() => setRefreshing(false));\r\n      // .then(()=>{console.log(\"story auto refresh\");});\r\n    }, 45000);\r\n\r\n    //and clear it :)\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  //date converting\r\n  let date = new Date(story.time * 1000).toDateString();\r\n\r\n  return story && story.url ? (\r\n    <Card\r\n      refreshControl={\r\n        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n      }\r\n    >\r\n      {/* HEADER OF A STORY */}\r\n      <CardItem header>\r\n        <Left>\r\n          <Icon name=\"newspaper-outline\" />\r\n          <Body>\r\n            <Text style={{ fontWeight: \"bold\" }}>{story.title}</Text>\r\n            <Text note>By: {story.by}</Text>\r\n            <Text note>Rating: {story.score}</Text>\r\n            <Text note>{date}</Text>\r\n          </Body>\r\n        </Left>\r\n      </CardItem>\r\n      {/* END HEADER OF A STORY */}\r\n\r\n      {/* BODY OF A STORY */}\r\n      <CardItem></CardItem>\r\n      <CardItem style={{ justifyContent: \"flex-end\" }}>\r\n        {/* <Body style={{ color: \"blue\" }}> */}\r\n        {/* <Right> */}\r\n        {/* <RNUrlPreview text={story.url} /> */}\r\n        {/* <Text>Press to open in browser</Text> */}\r\n        <Button\r\n          style={{ alignSelf: \"flex-end\" }}\r\n          info\r\n          onPress={() => Linking.openURL(story.url)}\r\n        >\r\n          <Text>Open link</Text>\r\n        </Button>\r\n        {/* </Right> */}\r\n        {/* </Body> */}\r\n      </CardItem>\r\n      {/* END BODY OF A STORY */}\r\n\r\n      {/* FOOTER OF A STORY */}\r\n      <CardItem footer bordered style={{ justifyContent: \"space-between\" }}>\r\n        {story.kids ? (\r\n          <Text\r\n            style={{ color: \"blue\" }}\r\n            onPress={() => {\r\n              props.navigation.navigate(\"Comments\", {\r\n                story,\r\n              });\r\n              // Actions.pageTwo({ story });!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n            }}\r\n          >\r\n            Show comments({story.kids.length})\r\n          </Text>\r\n        ) : (\r\n          <Text style={{ color: \"grey\" }}>No comments yet</Text>\r\n        )}\r\n\r\n        {/* onPress={() => Linking.openURL(story.url)}>link</Text> */}\r\n        <Text>{mapTime(story.time)} ago</Text>\r\n        {/* <Accordion dataArray={dataArray} expanded={0}/> */}\r\n      </CardItem>\r\n      {/* FOOTER OF A STORY */}\r\n    </Card>\r\n  ) : null;\r\n});\r\n","import { TouchableOpacity, RefreshControl } from \"react-native\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Story } from \"../components/Story\";\r\n\r\nimport { Content } from \"native-base\";\r\n\r\nimport { getStoryIds } from \"../services/hackingNewsAPI\";\r\n\r\n//SCROLLVIEW INFINITE SCROLL (+100 causes earlier scroll update)\r\nconst isCloseToBottom = ({ layoutMeasurement, contentOffset, contentSize }) => {\r\n  const paddingToBottom = 20;\r\n  return (\r\n    layoutMeasurement.height + contentOffset.y + 100 >=\r\n    contentSize.height - paddingToBottom\r\n  );\r\n};\r\n// END SCROLLVIEW INFINITE SCROLL\r\n\r\nexport default function StoriesContainer({ navigation, route }) {\r\n  // console.log(route.params.type);\r\n  // console.log(navigation);\r\n  // console.log(navigation.dangerouslyGetState());\r\n  //set number stories to show\r\n  const [storiesToShow, setStoriesToShow] = useState(20);\r\n\r\n  const handleSetStoriesToShow = () => {\r\n    if (storiesToShow < 500) {\r\n      setRefreshing(true);\r\n      setStoriesToShow(storiesToShow + 20);\r\n      setInterval(() => {\r\n        setRefreshing(false);\r\n      }, 1500);\r\n      // setRefreshing(false);\r\n    } else {\r\n      setStoriesToShow(500);\r\n    }\r\n  };\r\n\r\n  //set stories from API call\r\n  const [storyIds, setStoryIds] = useState([]);\r\n\r\n  //refreshing\r\n  const [refreshing, setRefreshing] = React.useState(false);\r\n\r\n  const onRefresh = React.useCallback(() => {\r\n    setRefreshing(true);\r\n    // console.log(\"swipe refresh\");\r\n\r\n    getStoryIds(route.params.type)\r\n      .then((data) => {\r\n        setStoryIds(data);\r\n      })\r\n      .then(() => setRefreshing(false));\r\n  }, []);\r\n\r\n  //useEffect for initialize and interval refreshing\r\n  useEffect(() => {\r\n    setRefreshing(true);\r\n\r\n    getStoryIds(route.params.type)\r\n      .then((data) => {\r\n        setStoryIds(data);\r\n      })\r\n      .then(() => setRefreshing(false));\r\n    // .then(()=>{console.log(\"the first refresh\");});\r\n\r\n    //set interval for repeating refresh\r\n    const interval = setInterval(() => {\r\n      setRefreshing(true);\r\n      getStoryIds(route.params.type)\r\n        .then((data) => {\r\n          setStoryIds(data);\r\n        })\r\n        .then(() => setRefreshing(false));\r\n      // .then(()=>{ console.log(\"another successful auto refresh\"); });\r\n    }, 60000);\r\n\r\n    //and clear it :)\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // for manual refresh BUTTON\r\n  // const  handleRefresh = () => {\r\n  //   getStoryIds().then(data => {\r\n  //     setStoryIds(data);\r\n  //     console.log(\"manual refresh\");\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <Content\r\n      onScroll={({ nativeEvent }) => {\r\n        if (isCloseToBottom(nativeEvent)) {\r\n          // console.log(storiesToShow);\r\n          // console.log(\"bikini bottom\");\r\n          handleSetStoriesToShow();\r\n        }\r\n      }}\r\n      scrollEventThrottle={400}\r\n      refreshControl={\r\n        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n      }\r\n    >\r\n      {/* MAP API CALL RESULT */}\r\n      {storyIds.slice(0, storiesToShow).map((storyId) => (\r\n        <TouchableOpacity\r\n          key={storyId}\r\n          onPress={() => {\r\n            // navigation.navigate(\"Comments\", {\r\n            //   storyId: storyId,\r\n            // });\r\n          }}\r\n          // onPress= {() => {Actions.pageTwo({storyId: storyId}); }}\r\n        >\r\n          <Story key={storyId} storyId={storyId} navigation={navigation} />\r\n        </TouchableOpacity>\r\n      ))}\r\n      {/* END MAP API CALL RESULT */}\r\n    </Content>\r\n  );\r\n}\r\n","import React, { useEffect, useState, memo } from \"react\";\r\nimport { getStory as getComment } from \"../services/hackingNewsAPI\";\r\nimport { mapTime } from \"../mappers/mapTime\";\r\nimport { Text } from \"native-base\";\r\n\r\nimport { List } from \"react-native-paper\";\r\n\r\nimport HTML from \"react-native-render-html\";\r\n\r\n// import { RefreshControl } from \"react-native\";\r\n\r\nexport const Comment = memo(function Comment(props) {\r\n  //toggle head comment(s) expanding\r\n  const [expanded, setExpanded] = React.useState(true);\r\n  const handlePress = () => setExpanded(!expanded);\r\n\r\n  //set comment\r\n  const [comment, setComment] = useState({});\r\n\r\n  //refreshing\r\n  const [refreshing, setRefreshing] = React.useState(false);\r\n\r\n  // const onRefresh = React.useCallback(() => {\r\n  //   setRefreshing(true);\r\n\r\n  //   getComment(props.commentId)\r\n  //     .then((data) => setComment(data))\r\n  //     .then(() => setRefreshing(false));\r\n  // }, []);\r\n\r\n  //useEffect for initialize and interval refreshing\r\n  useEffect(() => {\r\n    setRefreshing(true);\r\n\r\n    getComment(props.commentId)\r\n      .then((data) => setComment(data))\r\n      .then(() => setRefreshing(false));\r\n    // .then(()=>{console.log(\"comment auto refresh\");});\r\n\r\n    //set interval for repeating refresh\r\n    const interval = setInterval(() => {\r\n      setRefreshing(true);\r\n\r\n      getComment(props.commentId)\r\n        .then((data) => setComment(data))\r\n        .then(() => setRefreshing(false));\r\n      // .then(()=>{console.log(\"comment auto refresh\");});\r\n    }, 30000);\r\n\r\n    //and clear it :)\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  //date converting\r\n  let date = new Date(comment.time * 1000).toDateString();\r\n\r\n  return comment && comment.text ? (\r\n    <List.Section\r\n      style={{\r\n        borderBottomColor: \"#E8E8E8\",\r\n        borderBottomWidth: 2,\r\n        // borderWidth: 1,\r\n        // borderColor: \"#20232a\",\r\n        // borderRadius: 6,\r\n        backgroundColor: \"#F5F5F5\",\r\n      }}\r\n    >\r\n      <List.Accordion\r\n        expanded={expanded}\r\n        onPress={handlePress}\r\n        style={{\r\n          backgroundColor: \"#E8E8E8\",\r\n        }}\r\n        title={<Text>Comment by: {comment.by}</Text>}\r\n        description={`${date}${refreshing ? \" refreshing...\" : \"\"}`}\r\n        left={(props) => (\r\n          <List.Icon {...props} icon=\"chat-processing-outline\" />\r\n        )}\r\n      >\r\n        <List.Item left={() => <HTML source={{ html: comment.text }} />} />\r\n        <List.Item\r\n          left={() => (\r\n            <Text>\r\n              {\" \"}\r\n              {comment.kids ? (\r\n                <Text\r\n                  style={{ color: \"blue\" }}\r\n                  // onPress={  () => {Actions.pageTwo({comment}); }   }\r\n                >\r\n                  Replies({comment.kids.length})\r\n                </Text>\r\n              ) : (\r\n                <Text style={{ color: \"grey\" }}>No replies yet</Text>\r\n              )}\r\n            </Text>\r\n          )}\r\n          right={() => <Text>{mapTime(comment.time)} ago</Text>}\r\n        />\r\n        {/* REPLIES */}\r\n        {comment.kids && (\r\n          <List.Item\r\n            left={(props) => (\r\n              <List.Icon\r\n                {...props}\r\n                style={{ margin: 0, padding: 0 }}\r\n                icon=\"share-all-outline\"\r\n              />\r\n            )}\r\n            style={{\r\n              margin: 0,\r\n              padding: 0,\r\n              justifyContent: \"center\",\r\n              alignContent: \"center\",\r\n            }}\r\n            titleStyle={{ margin: 0, padding: 0, height: 0 }}\r\n            description={() => (\r\n              <List.Accordion\r\n                style={{ margin: -6, padding: 0 }}\r\n                title=\"toggle replies\"\r\n                titleStyle={{ margin: 0, padding: 0 }}\r\n                descriptionStyle={{\r\n                  margin: 0,\r\n                  padding: 0,\r\n                  backgroundColor: \"purple\",\r\n                }}\r\n              >\r\n                {/* HERE COMES THE RECURSION */}\r\n                {comment.kids &&\r\n                  comment.kids.map((kid) => (\r\n                    <Comment key={kid} commentId={kid} />\r\n                  ))}\r\n                {/* HERE COMES THE RECURSION */}\r\n              </List.Accordion>\r\n            )}\r\n          />\r\n        )}\r\n      </List.Accordion>\r\n    </List.Section>\r\n  ) : null;\r\n});\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  Container,\r\n  Content,\r\n  Card,\r\n  CardItem,\r\n  Text,\r\n  Button,\r\n  Icon,\r\n  Left,\r\n  Body,\r\n  Right,\r\n  Thumbnail,\r\n  Spinner,\r\n  Image,\r\n} from \"native-base\";\r\n\r\n// import { Actions } from \"react-native-router-flux\";!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// import { LinkPreview } from \"@flyerhq/react-native-link-preview\";\r\n// import { getLinkPreview, getPreviewFromContent } from \"link-preview-js\";\r\n// import { ReactTinyLink } from \"react-tiny-link\";\r\n// import LinkPreviewCus from \"../utils/LinkPreview\";\r\n// import Microlink from \"@microlink/react\"; // might work someday\r\n// import { useScrapper } from \"react-tiny-link\";\r\n\r\nimport { Comment } from \"../components/Comment\";\r\nimport { getStory, getMeta } from \"../services/hackingNewsAPI\";\r\nimport { RefreshControl } from \"react-native\";\r\n\r\n//SCROLLVIEW INFINITE SCROLL (+100 causes earlier scroll update)\r\nconst isCloseToBottom = ({ layoutMeasurement, contentOffset, contentSize }) => {\r\n  // console.log({ layoutMeasurement, contentOffset, contentSize });\r\n  const paddingToBottom = 20;\r\n  return (\r\n    layoutMeasurement.height + contentOffset.y + 100 >=\r\n    contentSize.height - paddingToBottom\r\n  );\r\n};\r\n//SCROLLVIEW INFINITE SCROLL\r\n\r\nexport default function CommentsContainer({ route, navigation }) {\r\n  // const [previewContainer, setPreviewContainer] = useState({});\r\n  // console.log(navigation);\r\n\r\n  let props = route.params;\r\n\r\n  // console.log(props.story.id);\r\n  const [previewData, setPreviewData] = useState({});\r\n\r\n  //set number comments to show\r\n  const [commentsToShow, setCommentsToShow] = useState(5);\r\n\r\n  const handleSetCommentsToShow = () => {\r\n    if (commentsToShow < props.story.kids.length) {\r\n      setCommentsToShow(commentsToShow + 5);\r\n    } else {\r\n      setCommentsToShow(props.story.kids.length);\r\n    }\r\n  };\r\n\r\n  //get id array from props and set\r\n  const [comments, setComments] = useState({});\r\n\r\n  // refreshing\r\n  const [refreshing, setRefreshing] = React.useState(false);\r\n\r\n  const onRefresh = React.useCallback(() => {\r\n    setRefreshing(true);\r\n    // console.log(\"story refresh\");\r\n\r\n    getStory(props.story.id)\r\n      .then((data) => data.kids && setComments(data.kids))\r\n      // .then((data) => console.log(data))\r\n      .then(() => setRefreshing(false));\r\n  }, []);\r\n\r\n  //useEffect for initialize and interval refreshing\r\n  useEffect(() => {\r\n    //extrastep for exclude error of empty array of comments\r\n    setComments(props.story.kids);\r\n\r\n    setRefreshing(true);\r\n\r\n    //!!!!!!!!!!!!!!!\r\n    getStory(props.story.id)\r\n      .then(function (data) {\r\n        data.kids && setComments(data.kids);\r\n        return data;\r\n      })\r\n      .then((data) => {\r\n        data && getMeta(props.story.url).then((res) => setPreviewData(res));\r\n      })\r\n      .then(() => setRefreshing(false));\r\n    // .then((res) => console.log(res));\r\n    //!!!!!!!!!!!!!!!\r\n\r\n    //that\r\n    // getStory(props.story.id)\r\n    //   .then((data) => data.kids && setComments(data.kids))\r\n    //   .then(() => setRefreshing(false));\r\n    //that\r\n\r\n    // .then(()=>{console.log(\"story useEffect refresh\");});\r\n\r\n    // getLinkPreview(\"https://www.youtube.com/watch?v=MejbOFk7H6c\").then(\r\n    //   (data) => {\r\n    //     console.log(data);\r\n    //     setPreviewContainer(data);\r\n    //   }\r\n    // );\r\n\r\n    //set interval for repeating refresh\r\n    const interval = setInterval(() => {\r\n      setRefreshing(true);\r\n\r\n      getStory(props.story.id)\r\n        .then((data) => data.kids && setComments(data.kids))\r\n        .then(() => setRefreshing(false));\r\n      // .then(()=>{console.log(\"story auto refresh\");});\r\n    }, 45000);\r\n\r\n    //and clear it :)\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  //alternate useEffect\r\n  // useEffect(() => {\r\n  //   setComments(props.story.kids);\r\n  // }, []);\r\n\r\n  //date converting\r\n  let date = new Date(props.story.time * 1000).toDateString();\r\n\r\n  //preview\r\n  // const [result, loading, error] = useScrapper({\r\n  //   url:\r\n  //     \"https://www.amazon.com/Steve-Madden-Mens-Jagwar-10-5/dp/B016X44MKA/ref=lp_18637582011_1_1?srs=18637582011&ie=UTF8&qid=1550721409&sr=8-1\",\r\n  // });\r\n  //preview\r\n\r\n  return (\r\n    <Container>\r\n      <Content\r\n        onScroll={({ nativeEvent }) => {\r\n          if (isCloseToBottom(nativeEvent)) {\r\n            // console.log(commentsToShow);\r\n            // console.log(\"bikini bottom\");\r\n            handleSetCommentsToShow();\r\n          }\r\n        }}\r\n        scrollEventThrottle={400}\r\n        refreshControl={\r\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n        }\r\n      >\r\n        {/* STORY CARD */}\r\n        <Card>\r\n          <CardItem>\r\n            <Left>\r\n              <Icon name=\"newspaper-outline\" />\r\n              <Body>\r\n                <Text style={{ fontWeight: \"bold\" }}>{props.story.title}</Text>\r\n                <Text note>{date}</Text>\r\n              </Body>\r\n            </Left>\r\n            <Right>\r\n              {previewData.logo && <Thumbnail source={previewData.logo.url} />}\r\n              {/* {previewData.logo.url && (\r\n                  <Thumbnail source={{ uri: previewData.logo.url }} />\r\n                )} */}\r\n            </Right>\r\n          </CardItem>\r\n          {/* PREVIEW */}\r\n          <CardItem\r\n            bordered\r\n            style={{ justifyContent: \"center\", alignItems: \"center\" }}\r\n          >\r\n            {/* <Text>{previewContainer.description}</Text> */}\r\n            {/* <LinkPreview text={props.story.url} /> */}\r\n            {/* <ReactTinyLink\r\n              cardSize=\"small\"\r\n              showGraphic={false}\r\n              maxLine={2}\r\n              minLine={1}\r\n              url={\"https://github.com/\"}\r\n            /> */}\r\n            {/* <LinkPreviewCus /> */}\r\n            {/* <Microlink url=\"https://github.com/\" media=\"image\" /> */}\r\n            {/* {JSON.stringify(result)} */}\r\n            <Body>\r\n              {previewData.image !== undefined ? (\r\n                <Image\r\n                  source={previewData.image.url}\r\n                  style={{\r\n                    height: 200,\r\n                    width: null,\r\n                    flex: 1,\r\n                    resizeMode: \"cover\",\r\n                  }}\r\n                />\r\n              ) : null}\r\n              {previewData.description && (\r\n                <Text> {previewData.description} </Text>\r\n              )}\r\n            </Body>\r\n          </CardItem>\r\n          {/* END PREVIEW */}\r\n          <CardItem footer bordered style={{ justifyContent: \"space-between\" }}>\r\n            <Text style={{ color: \"grey\" }}>\r\n              Total comments: {props.story.kids.length}\r\n            </Text>\r\n            <Button\r\n              danger\r\n              onPress={() => {\r\n                navigation.pop();\r\n                // Actions.pop();!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n              }}\r\n            >\r\n              <Text>Back to news page</Text>\r\n            </Button>\r\n          </CardItem>\r\n        </Card>\r\n        {/* END STORY CARD */}\r\n\r\n        {/* MAP COMMENTS */}\r\n        {comments &&\r\n          comments.length > 0 &&\r\n          comments\r\n            .slice(0, commentsToShow)\r\n            .map((commentId) => (\r\n              <Comment key={commentId} commentId={commentId} />\r\n            ))}\r\n        {/* MAP COMMENTS */}\r\n      </Content>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Container, Header, Title, Content, Body } from \"native-base\";\r\n\r\n// import { Router, Scene } from \"react-native-router-flux\";!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\nimport { useFonts } from \"expo-font\";\r\nimport StoriesContainer from \"./app/containers/StoriesContainer\";\r\nimport CommentsContainer from \"./app/containers/CommentsContainer\";\r\n\r\n// NAV\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\r\n// NAV\r\n\r\n// NAV\r\nconst Stack = createStackNavigator();\r\nconst StoriesStack = createStackNavigator();\r\nconst Tab = createMaterialTopTabNavigator();\r\n// NAV\r\n\r\nfunction StoriesStackScreen(props) {\r\n  // console.log(props.navigation.dangerouslyGetParent());\r\n  // console.log(props.route.params[0]);\r\n  // console.log(props.route.params.type);\r\n  // console.log(props);\r\n  return (\r\n    <StoriesStack.Navigator>\r\n      <StoriesStack.Screen\r\n        // tabBarVisible={false}\r\n        options={{ header: () => null }} //hides the title\r\n        name=\"Stories\"\r\n        component={StoriesContainer}\r\n        initialParams={{ type: props.route.params.type }}\r\n        // type={props.route.params[0]}\r\n      />\r\n      <StoriesStack.Screen\r\n        name=\"Comments\"\r\n        component={CommentsContainer}\r\n        options={{ header: () => null }}\r\n      />\r\n    </StoriesStack.Navigator>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  //for fonts\r\n  const [loaded] = useFonts({\r\n    Helvetica: require(\"native-base/Fonts/Roboto.ttf\"),\r\n    Roboto: require(\"native-base/Fonts/Roboto.ttf\"),\r\n    Roboto_medium: require(\"native-base/Fonts/Roboto_medium.ttf\"),\r\n  });\r\n\r\n  if (!loaded) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      <Container>\r\n        <Header style={{ backgroundColor: \"#003133\" }}>\r\n          <Body>\r\n            <Title style={{ alignSelf: \"center\", margin: 10, color: \"white\" }}>\r\n              Real hacker news\r\n            </Title>\r\n          </Body>\r\n        </Header>\r\n        <Tab.Navigator>\r\n          <Tab.Screen\r\n            testProps={\"123\"}\r\n            initialParams={{ type: \"n\" }}\r\n            name=\"New\"\r\n            component={StoriesStackScreen}\r\n          />\r\n          <Tab.Screen\r\n            testProps={\"456\"}\r\n            initialParams={{ type: \"t\" }}\r\n            name=\"Top\"\r\n            component={StoriesStackScreen}\r\n          />\r\n          <Tab.Screen\r\n            testProps={\"789\"}\r\n            initialParams={{ type: \"b\" }}\r\n            name=\"Best\"\r\n            component={StoriesStackScreen}\r\n          />\r\n        </Tab.Navigator>\r\n        {/* <Stack.Navigator>\r\n          <Stack.Screen name=\"Stories\" component={StoriesContainer} />\r\n          <Stack.Screen name=\"Comments\" component={CommentsContainer} />\r\n        </Stack.Navigator> */}\r\n        {/* <Router hideNavBar=\"true\">\r\n        <Scene key=\"root\" hideNavBar={true}>\r\n          <Content style={{ backgroundColor: \"grey\" }}>\r\n            <Scene\r\n              key=\"pageOne\"\r\n              component={StoriesContainer}\r\n              title=\"Fresh news\"\r\n              initial={true}\r\n              hideNavBar={true}\r\n            />\r\n            <Scene\r\n              key=\"pageTwo\"\r\n              component={CommentsContainer}\r\n              title=\"News info\"\r\n              hideNavBar={true}\r\n            />\r\n          </Content>\r\n        </Scene>\r\n      </Router> */}\r\n      </Container>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n"],"sourceRoot":""}